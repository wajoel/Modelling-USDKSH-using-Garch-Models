processed_data <- data %>%
select(Date, Price) %>%              # Keep only Date and Price columns
mutate(
Date = mdy(Date),                 # Convert Date to datetime format
Price = as.numeric(Price)        # Ensure Price is numeric
) %>%
drop_na() %>%                       # Drop rows with NA values
arrange(desc(Price))                # Arrange in descending order by Price
# View the processed data
head(processed_data)
nrow(processed_data)
# Load necessary libraries
library(dplyr)
library(lubridate)
library(writexl)
# Read the data
data <- read_csv("C:/Users/BRAILER/Downloads/EUR_USDHistoricalData.csv")
# Process the data
processed_data <- data %>%
select(Date, Price) %>%              # Keep only Date and Price columns
mutate(
Date = mdy(Date),                 # Convert Date to datetime format
Price = as.numeric(Price)        # Ensure Price is numeric
) %>%
drop_na() %>%                       # Drop rows with NA values
arrange(desc(Price))                # Arrange in descending order by Price
# Convert to .xlsx without saving (direct output)
write_xlsx(processed_data
# , path = "clipboard"
)
# Load necessary libraries
library(dplyr)
library(lubridate)
library(writexl)
# Read the data
data <- read_csv("C:/Users/BRAILER/Downloads/EUR_USDHistoricalData.csv")
# Process the data
processed_data <- data %>%
select(Date, Price) %>%              # Keep only Date and Price columns
mutate(
Date = mdy(Date),                 # Convert Date to datetime format
Price = as.numeric(Price)        # Ensure Price is numeric
) %>%
drop_na() %>%                       # Drop rows with NA values
arrange(desc(Price))                # Arrange in descending order by Price
# Convert to .xlsx without saving (direct output)
write_xlsx(processed_data
# , path = "clipboard"
)
head(processed_data)
# Load necessary libraries
library(dplyr)
library(lubridate)
library(writexl)
# Read the data
data <- read_csv("C:/Users/BRAILER/Downloads/EUR_USDHistoricalData.csv")
# Process the data
processed_data <- data %>%
select(Date, Price) %>%              # Keep only Date and Price columns
mutate(
Date = mdy(Date),                 # Convert Date to datetime format
Price = as.numeric(Price)        # Ensure Price is numeric
) %>%
drop_na() %>%                       # Drop rows with NA values
arrange(desc(Price))                # Arrange in descending order by Price
# Convert to .xlsx without saving (direct output)
write_xlsx(processed_data
# , path = "clipboard"
)
processed_data
# functions.R
# Load necessary libraries
library(dplyr)
library(lubridate)
library(writexl)
# Define the clean_data function
clean_data <- function(data, output_path = NULL, to_clipboard = FALSE) {
# Clean the data
cleaned_data <- data %>%
select(Date, Price) %>%              # Keep only Date and Price columns
mutate(
Date = mdy(Date),                 # Convert Date to datetime format
Price = as.numeric(Price)        # Ensure Price is numeric
) %>%
drop_na() %>%                       # Drop rows with NA values
arrange(desc(Price))                # Arrange in descending order by Price
# Save to Excel or copy to clipboard
if (!is.null(output_path)) {
write_xlsx(cleaned_data, path = output_path)  # Save to specified file path
}
if (to_clipboard) {
write_xlsx(cleaned_data, path = "clipboard")  # Copy to clipboard
}
return(cleaned_data)  # Return the cleaned data
}
# main.R
# Load necessary libraries
library(readr)
# Source the functions.R script
source("path/to/functions.R")  # Update the path to where functions.R is located
# main.R
# Load necessary libraries
library(readr)
# Source the functions.R script
source("currencies.R")  # Update the path to where functions.R is located
# Read the data
data <- read_csv("C:/Users/BRAILER/Downloads/EUR_USDHistoricalData.csv")
# Call the clean_data function
processed_data <- clean_data(data, to_clipboard = FALSE)
# main.R
options(warn = -1)
# Load necessary libraries
library(readr)
# Source the functions.R script
source("currencies.R")  # Update the path to where functions.R is located
# Read the data
data <- read_csv("C:/Users/BRAILER/Downloads/EUR_USDHistoricalData.csv")
# Call the clean_data function
processed_data <- clean_data(data, to_clipboard = FALSE)
# main.R
options(warn = -1)
# Load necessary libraries
library(readr)
# Source the functions.R script
source("currencies.R")  # Update the path to where functions.R is located
# Read the data
data <- read_csv("C:/Users/BRAILER/Downloads/EUR_USDHistoricalData.csv")
# Call the clean_data function
processed_data <- clean_data(data, to_clipboard = FALSE)
head(processed_data, 10)
# main.R
options(warn = -1)
# Load necessary libraries
library(readr)
# Source the functions.R script
source("currencies.R")  # Update the path to where functions.R is located
# Read the data
data <- read_csv("C:/Users/BRAILER/Downloads/EUR_USDHistoricalData.csv")
# Call the clean_data function
processed_data <- clean_data(data, to_clipboard = FALSE)
head(processed_data, 10)
# main.R
options(warn = -1)
# Load necessary libraries
library(readr)
# Source the functions.R script
source("currencies.R")  # Update the path to where functions.R is located
# Read the data
data <- read_csv("C:/Users/BRAILER/Downloads/EUR_USDHistoricalData.csv")
# Call the clean_data function
processed_data <- clean_data(data, to_clipboard = FALSE)
head(processed_data, 10)
# main.R
options(warn = -1)
# Load necessary libraries
library(readr)
# Source the functions.R script
source("currencies.R")  # Update the path to where functions.R is located
# Read the data
data <- read_csv("C:/Users/BRAILER/Downloads/EUR_USDHistoricalData.csv, show_col_types = FALSE")
# main.R
options(warn = -1)
# Load necessary libraries
library(readr)
# Source the functions.R script
source("currencies.R")  # Update the path to where functions.R is located
# Read the data
data <- read_csv("C:/Users/BRAILER/Downloads/EUR_USDHistoricalData.csv", show_col_types = FALSE)
# Call the clean_data function
processed_data <- clean_data(data, to_clipboard = FALSE)
head(processed_data, 10)
str(processed_data)
# functions.R
# Load necessary libraries
library(dplyr)
library(e1071)  # For skewness and kurtosis
# Define the summary_statistics function
summary_statistics <- function(data) {
# Calculate summary statistics for numeric columns
stats <- data %>%
summarise(
Observations = n(),                          # Number of observations
Mean = mean(Price, na.rm = TRUE),            # Mean
Median = median(Price, na.rm = TRUE),        # Median
SD = sd(Price, na.rm = TRUE),                # Standard Deviation
Variance = var(Price, na.rm = TRUE),         # Variance
Min = min(Price, na.rm = TRUE),              # Minimum
Max = max(Price, na.rm = TRUE),              # Maximum
Skewness = skewness(Price, na.rm = TRUE),    # Skewness
Kurtosis = kurtosis(Price, na.rm = TRUE)     # Kurtosis
)
return(stats)
}
# functions.R
# Load necessary libraries
library(dplyr)
library(e1071)  # For skewness and kurtosis
# Define the summary_statistics function
summary_statistics <- function(data) {
# Calculate summary statistics for numeric columns
stats <- data %>%
summarise(
Observations = n(),                          # Number of observations
Mean = mean(Price, na.rm = TRUE),            # Mean
Median = median(Price, na.rm = TRUE),        # Median
SD = sd(Price, na.rm = TRUE),                # Standard Deviation
Variance = var(Price, na.rm = TRUE),         # Variance
Min = min(Price, na.rm = TRUE),              # Minimum
Max = max(Price, na.rm = TRUE),              # Maximum
Skewness = skewness(Price, na.rm = TRUE),    # Skewness
Kurtosis = kurtosis(Price, na.rm = TRUE)     # Kurtosis
)
return(stats)
}
# functions.R
# Load necessary libraries
library(dplyr)
library(e1071)  # For skewness and kurtosis
# Define the summary_statistics function
summary_statistics <- function(data) {
# Calculate summary statistics for numeric columns
stats <- data %>%
summarise(
Observations = n(),                          # Number of observations
Mean = mean(Price, na.rm = TRUE),            # Mean
Median = median(Price, na.rm = TRUE),        # Median
SD = sd(Price, na.rm = TRUE),                # Standard Deviation
Variance = var(Price, na.rm = TRUE),         # Variance
Min = min(Price, na.rm = TRUE),              # Minimum
Max = max(Price, na.rm = TRUE),              # Maximum
Skewness = skewness(Price, na.rm = TRUE),    # Skewness
Kurtosis = kurtosis(Price, na.rm = TRUE)     # Kurtosis
)
return(stats)
}
# main.R
# Load necessary libraries
library(readr)
# Source the functions.R script
source("dataCleaning.R")  # Update the path to where functions.R is located
# Read the data
data <- read_csv("C:/Users/BRAILER/Downloads/EUR_USDHistoricalData.csv", show_col_types = FALSE)
# Call the clean_data function
processed_data <- clean_data(data, to_clipboard = FALSE)
head(processed_data, 10)
str(processed_data)
source("summaryStatistics.R")
# Call the summary_statistics function to get the summary statistics
summary_stats <- summary_statistics(processed_data)
source("summaryStatistics.R")
# Call the summary_statistics function to get the summary statistics
summary_stats <- summary_statistics(processed_data)
summary_stats
source("summaryStatistics.R")
# Call the summary_statistics function to get the summary statistics
summary_stats <- summary_statistics(processed_data)
summary_stats
# functions.R
# Load necessary libraries
library(ggplot2)
library(tidyr)
library(dplyr)
# Define the time_series_plot function
time_series_plot <- function(data) {
# Reshape data from wide to long format for easier plotting
data_long <- data %>%
select(Date, Price, Open, High, Low, `Change %`) %>%
pivot_longer(cols = c(Price, Open, High, Low, `Change %`),
names_to = "Variable",
values_to = "Value") %>%
mutate(Date = as.Date(Date, format = "%m/%d/%Y"))  # Ensure Date is in Date format
# Plot the data
p <- ggplot(data_long, aes(x = Date, y = Value, color = Variable)) +
geom_line() +
theme_minimal() +
labs(
title = "Time Series Plot of EUR/USD Data",
x = "Date",
y = "Value",
color = "Variable"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate date labels for better readability
# Print the plot
print(p)
}
source("datafizualization.R")
# Call the time_series_plot function to visualize the time series data
time_series_plot(processed_data)
# Time series plot function for all features (dynamic columns)
time_series_plot <- function(data) {
# Select all numeric columns excluding the 'Date' column
numeric_columns <- names(data)[sapply(data, is.numeric)]
# Create the plot
ggplot(data, aes(x = as.Date(Date, format = "%m/%d/%Y"))) +
# Loop through numeric columns and create lines for each
lapply(numeric_columns, function(col) {
geom_line(aes_string(y = col, color = col))
}) %>%
do.call(ggplot2::`+`, .) +  # Apply all layers to the plot
theme_minimal() +
labs(
title = "Time Series Plot of EUR/USD Data",
x = "Date",
y = "Value",
color = "Variable"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate date labels
}
source("datafizualization.R")
# Call the time_series_plot function to visualize the time series data
time_series_plot(processed_data)
# Time series plot function for all features (dynamic columns)
time_series_plot <- function(data) {
# Select all numeric columns excluding the 'Date' column
numeric_columns <- names(data)[sapply(data, is.numeric)]
# Create the plot
ggplot(data, aes(x = as.Date(Date, format = "%m/%d/%Y"))) +
# Loop through numeric columns and create lines for each
lapply(numeric_columns, function(col) {
geom_line(aes_string(y = col, color = col))
}) %>%
do.call(ggplot2::`+`, .) +  # Apply all layers to the plot
theme_minimal() +
labs(
title = "Time Series Plot of EUR/USD Data",
x = "Date",
y = "Value",
color = "Variable"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate date labels
source("datafizualization.R")
# Call the time_series_plot function to visualize the time series data
time_series_plot(processed_data)
source("datafizualization.R")
# Call the time_series_plot function to visualize the time series data
time_series_plot(processed_data)
source("datafizualization.R")
# Call the time_series_plot function to visualize the time series data
time_series_plot(processed_data)
# Load necessary package
library(urca)
# ADF test function
adf_test <- function(time_series) {
# Perform the ADF test
adf_result <- ur.df(time_series, type = "drift", selectlags = "AIC")
# Print the summary of the test result
print(summary(adf_result))
# Return the test result
return(adf_result)
# Load necessary package
library(urca)
source(adfTest.R)
# Example usage with 'Price' column from your dataset
adf_test(processed_data$Price)
source(adfTest.R)
source("adfTest.R")
# Example usage with 'Price' column from your dataset
adf_test(processed_data$Price)
source("adfTest.R")
# Example usage with 'Price' column from your dataset
adf_test(processed_data$Price)
source("adfTest.R")
# Example usage with 'Price' column from your dataset
adf_test(processed_data$Price)
source("adfTest.R")
# Example usage with 'Price' column from your dataset
adf_test(processed_data$Price)
source("adfTest.R")
source("adfTest.R")
check_stationarity <- function(data, column_name) {
# Load required library
if (!requireNamespace("tseries", quietly = TRUE)) {
install.packages("tseries")
}
library(tseries)
# Extract the column as a time series
series <- data[[column_name]]
# Perform the ADF test
adf_result <- adf.test(series, alternative = "stationary")
# Extract results
test_statistic <- adf_result$statistic
p_value <- adf_result$p.value
critical_values <- c(`1%` = -3.43, `2.5%` = -2.86, `5%` = -2.57) # Replace with actual critical values if different
# Formulate conclusions for different significance levels
conclusions <- sapply(names(critical_values), function(level) {
threshold <- critical_values[level]
if (test_statistic < threshold) {
paste("Reject the null hypothesis (Stationary) at", level, "level")
} else {
paste("Fail to reject the null hypothesis (Non-stationary) at", level, "level")
}
})
# Print results
cat("\n--- ADF Test Results ---\n")
cat("ADF Statistic:", test_statistic, "\n")
cat("p-value:", p_value, "\n")
cat("Critical Values:\n")
for (level in names(critical_values)) {
cat(" ", level, ":", critical_values[level], "\n")
}
cat("\nConclusions:\n")
for (level in names(conclusions)) {
cat(" ", conclusions[level], "\n")
}
# Return a list of results
return(list(
ADF_Statistic = test_statistic,
p_value = p_value,
Critical_Values = critical_values,
Conclusions = conclusions
))
}
source("adfTest.R")
# Example usage with 'Price' column from your dataset
check_stationarity(processed_data, processed_data$Price)
source("adfTest.R")
# Example usage with 'Price' column from your dataset
check_stationarity(processed_data$Price)
# main.R
# Load necessary libraries
library(readr)
# Source the functions.R script
source("dataCleaning.R")  # Update the path to where functions.R is located
# Read the data
data <- read_csv("C:/Users/BRAILER/Downloads/EUR_USDHistoricalData.csv", show_col_types = FALSE)
# Call the clean_data function
processed_data <- clean_data(data, to_clipboard = FALSE)
head(processed_data, 10)
str(processed_data)
source("summaryStatistics.R")
# Call the summary_statistics function to get the summary statistics
summary_stats <- summary_statistics(processed_data)
summary_stats
source("datafizualization.R")
# Call the time_series_plot function to visualize the time series data
time_series_plot(processed_data)
# Time series plot function for all features (dynamic columns)
time_series_plot <- function(data) {
# Select all numeric columns excluding the 'Date' column
numeric_columns <- names(data)[sapply(data, is.numeric)]
# Create the base plot with Date on x-axis
p <- ggplot(data, aes(x = as.Date(Date, format = "%m/%d/%Y"))) +
theme_minimal() +
labs(
title = "Time Series Plot of EUR/USD Data",
x = "Time",
y = "Price",
color = "Variable"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate date labels
# Add a line for each numeric column
for (col in numeric_columns) {
p <- p + geom_line(aes(y = .data[[col]], color = col))  # Using .data[[col]] for dynamic column referencing
}
# Print the plot
print(p)
}
# Time series plot function for all features (dynamic columns)
time_series_plot <- function(data) {
# Select all numeric columns excluding the 'Date' column
numeric_columns <- names(data)[sapply(data, is.numeric)]
# Create the base plot with Date on x-axis
p <- ggplot(data, aes(x = as.Date(Date, format = "%m/%d/%Y"))) +
theme_minimal() +
labs(
title = "Time Series Plot of EUR/USD Data",
x = "Time",
y = "Price",
color = "Variable"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate date labels
# Add a line for each numeric column
for (col in numeric_columns) {
p <- p + geom_line(aes(y = .data[[col]], color = col))  # Using .data[[col]] for dynamic column referencing
}
# Print the plot
print(p)
}
source("datafizualization.R")
# Call the time_series_plot function to visualize the time series data
time_series_plot(processed_data)
# Time series plot function for all features (dynamic columns)
time_series_plot <- function(data) {
# Select all numeric columns excluding the 'Date' column
numeric_columns <- names(data)[sapply(data, is.numeric)]
# Create the base plot with Date on x-axis
p <- ggplot(data, aes(x = as.Date(Date, format = "%m/%d/%Y"))) +
theme_minimal() +
labs(
title = "Time Series Plot of EUR/USD Data",
x = "Time",
y = "Price",
color = "Variable"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate date labels
# Add a line for each numeric column
for (col in numeric_columns) {
p <- p + geom_line(aes(y = .data[[col]], color = col))  # Using .data[[col]] for dynamic column referencing
}
# Print the plot
print(p)
}
source("datafizualization.R")
# Call the time_series_plot function to visualize the time series data
time_series_plot(processed_data)
source("datafizualization.R")
# Call the time_series_plot function to visualize the time series data
time_series_plot(processed_data)
source("datafizualization.R")
source("datafizualization.R")
# Call the time_series_plot function to visualize the time series data
time_series_plot(processed_data)
